--- /home/max/SW/golang/go1.10.1-src/src/go/scanner/scanner.go	2018-03-29 06:28:16.000000000 +0200
+++ scanner.go	2019-09-19 19:51:35.803339417 +0200
@@ -16,6 +16,8 @@
 	"strconv"
 	"unicode"
 	"unicode/utf8"
+
+	etoken "github.com/truthtracer/gomacro/go/etoken"
 )
 
 // An ErrorHandler may be provided to Scanner.Init. If a syntax error is
@@ -31,12 +33,14 @@
 //
 type Scanner struct {
 	// immutable state
-	file *token.File  // source file handle
+	file *etoken.File // source file handle
 	dir  string       // directory portion of file.Name()
 	src  []byte       // source
 	err  ErrorHandler // error reporting; or nil
 	mode Mode         // scanning mode
 
+	macroChar rune // prefix of macro-related keywords and symbols ' ` , ,@
+
 	// scanning state
 	ch         rune // current character
 	offset     int  // character offset
@@ -50,7 +54,7 @@
 
 const bom = 0xFEFF // byte order mark, only permitted as very first character
 
-// Read the next Unicode char into s.ch.
+// Read the next Unicode rune into s.ch.
 // s.ch < 0 means end-of-file.
 //
 func (s *Scanner) next() {
@@ -110,7 +114,7 @@
 // Note that Init may call err if there is an error in the first character
 // of the file.
 //
-func (s *Scanner) Init(file *token.File, src []byte, err ErrorHandler, mode Mode) {
+func (s *Scanner) Init(file *etoken.File, src []byte, err ErrorHandler, mode Mode, macroChar rune) {
 	// Explicitly initialize all fields since a scanner may be reused.
 	if file.Size() != len(src) {
 		panic(fmt.Sprintf("file size (%d) does not match src len (%d)", file.Size(), len(src)))
@@ -120,6 +124,7 @@
 	s.src = src
 	s.err = err
 	s.mode = mode
+	s.macroChar = macroChar
 
 	s.ch = ' '
 	s.offset = 0
@@ -337,6 +342,27 @@
 
 fraction:
 	if s.ch == '.' {
+		// allow methods on numbers, i.e. NUMBER.MethodName
+		// by checking whether the first rune after '.' is a letter different from 'E', 'e' or 'i'
+		// this means numbers cannot have one-character methods named 'E'
+		if s.rdOffset < len(s.src) {
+			ch := s.src[s.rdOffset]
+			if isLetter(rune(ch)) && ch != 'E' && ch != 'e' && ch != 'i' {
+				// method name
+				goto exit
+			}
+			if ch == 'E' {
+				// could be either exponent or method name starting with 'E'
+				// as for example "Equal"
+				if s.rdOffset+1 < len(s.src) {
+					ch = s.src[s.rdOffset+1]
+					if ch != '-' && ch != '+' && digitVal(rune(ch)) >= 10 {
+						goto exit
+					}
+				}
+			}
+		}
+		// parse as float
 		tok = token.FLOAT
 		s.next()
 		s.scanMantissa(10)
@@ -613,7 +639,7 @@
 		lit = s.scanIdentifier()
 		if len(lit) > 1 {
 			// keywords are longer than one letter - avoid lookup otherwise
-			tok = token.Lookup(lit)
+			tok = etoken.Lookup(lit)
 			switch tok {
 			case token.IDENT, token.BREAK, token.CONTINUE, token.FALLTHROUGH, token.RETURN:
 				insertSemi = true
@@ -699,8 +725,14 @@
 			}
 		case '*':
 			tok = s.switch2(token.MUL, token.MUL_ASSIGN)
-		case '/':
-			if s.ch == '/' || s.ch == '*' {
+		case '/', '#':
+			if ch == '/' && (s.ch == '/' || s.ch == '*') || ch == '#' && s.ch == '!' {
+				// accept both #! and // as line comments
+				// in this way, *.gomacro files can start with "#!/usr/bin/env gomacro"
+				// Unix-like systems will happily execute them directly
+				if s.ch == '!' {
+					s.ch = '/'
+				}
 				// comment
 				if s.insertSemi && s.findLineEnd() {
 					// reset position to the beginning of the comment
@@ -718,8 +750,15 @@
 				}
 				tok = token.COMMENT
 				lit = comment
-			} else {
+			} else if ch == '/' {
 				tok = s.switch2(token.QUO, token.QUO_ASSIGN)
+			} else if ch == '#' {
+				tok = etoken.HASH
+			} else {
+				s.error(s.file.Offset(pos), fmt.Sprintf("illegal character %#U", ch))
+				insertSemi = s.insertSemi // preserve insertSemi info
+				tok = token.ILLEGAL
+				lit = string(ch)
 			}
 		case '%':
 			tok = s.switch2(token.REM, token.REM_ASSIGN)
@@ -747,6 +786,38 @@
 			}
 		case '|':
 			tok = s.switch3(token.OR, token.OR_ASSIGN, '|', token.LOR)
+		case '@':
+			// patch: support macro, quote and friends
+			tok = etoken.SPLICE
+		case s.macroChar:
+			// patch: support macro, quote and friends. s.macroChar is configurable, default is '~'
+			// quote           macroChar '
+			// quasiquote      macroChar `
+			// unquote         macroChar ,
+			// unquote_splice  macroChar ,@
+			switch s.ch {
+			case '\'':
+				s.next()
+				tok = etoken.QUOTE
+			case '`', '"': // accept both ~` and ~" as ~quasiquote, because ~` confuses syntax hilighting in IDEs
+				s.next()
+				tok = etoken.QUASIQUOTE
+			case ',':
+				s.next()
+				if s.ch == '@' {
+					s.next()
+					tok = etoken.UNQUOTE_SPLICE
+				} else {
+					tok = etoken.UNQUOTE
+				}
+			default:
+				lit = s.scanIdentifier()
+				tok = etoken.LookupSpecial(lit)
+				if tok == token.ILLEGAL {
+					s.error(s.file.Offset(pos), fmt.Sprintf("expecting macro-related keyword after '%c', found '%c%s'", s.macroChar, s.macroChar, lit))
+					insertSemi = s.insertSemi // preserve insertSemi info
+				}
+			}
 		default:
 			// next reports unexpected BOMs - don't repeat
 			if ch != bom {
