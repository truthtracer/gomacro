/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2019 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * func0ret1.go
 *
 *  Created on Apr 16, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	. "github.com/truthtracer/gomacro/base"
	xr "github.com/truthtracer/gomacro/xreflect"
)

:package fast

:import (
	r "reflect"
	"go/ast"
)


// ----------------- func() t0 ---------------------

:macro mfunc0ret1(ret0typ ast.Node) ast.Node {
	if EvalType(ret0typ) == nil {
		// not a well-known type
		return ~"{
			return c.funcGeneric(t, m)
		}
	}
	return ~"{
		if funcbody == nil {
			return func(env *Env) xr.Value {
				return xr.ValueOf(func() (ret0 ~,ret0typ) {
					return
				})
			}
		}
		resultfun := m.resultfun[0].(func (*Env) ~,ret0typ)
		return func(env *Env) xr.Value {
			// function is closed over the env used to DECLARE it
			env.MarkUsedByClosure()
			return xr.ValueOf(func() (ret0 ~,ret0typ) {
				env := newEnv4Func(env, nbind, nintbind, debugC)

				// execute the body
				funcbody(env)

				// extract result
				ret0 = resultfun(env)
				env.freeEnv4Func()
				return
			})
		}
	}
}

func (c *Comp) func0ret1(t xr.Type, m *funcMaker) func(*Env) xr.Value {
	// do NOT keep a reference to funcMaker
	nbind := m.nbind
	nintbind := m.nintbind
	funcbody := m.funcbody

	var debugC *Comp
	if c.Globals.Options&OptDebugger != 0 {
		// keep a reference to c only if needed
		debugC = c
	}
	tret0 := t.Out(0)
	kret0 := tret0.Kind()
	switch kret0 {
	case xr.Bool:      {mfunc0ret1; bool}
	case xr.Int:       {mfunc0ret1; int}
	case xr.Int8:      {mfunc0ret1; int8}
	case xr.Int16:     {mfunc0ret1; int16}
	case xr.Int32:     {mfunc0ret1; int32}
	case xr.Int64:     {mfunc0ret1; int64}
	case xr.Uint:      {mfunc0ret1; uint}
	case xr.Uint8:     {mfunc0ret1; uint8}
	case xr.Uint16:    {mfunc0ret1; uint16}
	case xr.Uint32:    {mfunc0ret1; uint32}
	case xr.Uint64:    {mfunc0ret1; uint64}
	case xr.Uintptr:   {mfunc0ret1; uintptr}
	case xr.Float32:   {mfunc0ret1; float32}
	case xr.Float64:   {mfunc0ret1; float64}
	case xr.Complex64: {mfunc0ret1; complex64}
	case xr.Complex128:{mfunc0ret1; complex128}
	case xr.String:    {mfunc0ret1; string}
	default:          return nil
	}
}

