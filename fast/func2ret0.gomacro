/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2019 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * func2ret0.go
 *
 *  Created on Apr 16, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"unsafe"

	. "github.com/truthtracer/gomacro/base"
	"github.com/truthtracer/gomacro/base/reflect"
	xr "github.com/truthtracer/gomacro/xreflect"
)

:package fast

:import (
	r "reflect"
	"go/ast"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makeprefixtypeident(prefix string, t r.Type) *ast.Ident {
	name := prefix + upcasefirstbyte(t.Name())
	return &ast.Ident{Name: name}
}

// convert a well-known reflect.Type into one of the constants TypeOf*
:func maketypeident(t r.Type) *ast.Ident {
	return makeprefixtypeident("TypeOf", t)
}

:macro mcallfuncy2ret0(typ ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	ident := makeprefixtypeident("func2ret0", t)
	return ~"{
		ret = ~,ident (m, indexes, karg1, debugC)
	}
}
:macro mfuncxy2ret0(dummy ast.Node) ast.Node {
	return ~"{
		/* not used
		argdecls := &[2]func(*Env, xr.Value){nil, nil}
		for i, bind := range m.Param {
			argdecls[i] = c.DeclBindRuntimeValue(bind)
			if argdecls[i] == nil {
				argdecls[i] = declBindRuntimeValueNop
			}
		}
		*/
		switch karg0 {
		case xr.Bool:      {mcallfuncy2ret0; bool}
		case xr.Int:       {mcallfuncy2ret0; int}
		case xr.Int8:      {mcallfuncy2ret0; int8}
		case xr.Int16:     {mcallfuncy2ret0; int16}
		case xr.Int32:     {mcallfuncy2ret0; int32}
		case xr.Int64:     {mcallfuncy2ret0; int64}
		case xr.Uint:      {mcallfuncy2ret0; uint}
		case xr.Uint8:     {mcallfuncy2ret0; uint8}
		case xr.Uint16:    {mcallfuncy2ret0; uint16}
		case xr.Uint32:    {mcallfuncy2ret0; uint32}
		case xr.Uint64:    {mcallfuncy2ret0; uint64}
		case xr.Uintptr:   {mcallfuncy2ret0; uintptr}
		case xr.Float32:   {mcallfuncy2ret0; float32}
		case xr.Float64:   {mcallfuncy2ret0; float64}
		case xr.Complex64: {mcallfuncy2ret0; complex64}
		case xr.Complex128:{mcallfuncy2ret0; complex128}
		case xr.String:    {mcallfuncy2ret0; string}
		}
	}
}

// ==================================== func2ret0 ========================================

func (c *Comp) func2ret0(t xr.Type, m *funcMaker) func(*Env) xr.Value {
	karg0 := t.In(0).Kind()
	karg1 := t.In(1).Kind()

	if !reflect.IsOptimizedKind(karg0) || !reflect.IsOptimizedKind(karg1) {
		return nil
	}
	// do not keep a reference to funcMaker
	indexes := &[2]int{
		m.Param[0].Desc.Index(),
		m.Param[1].Desc.Index(),
	}
	var debugC *Comp
	if c.Globals.Options&OptDebugger != 0 {
		// keep a reference to c only if needed
		debugC = c
	}
	var ret func(*Env) xr.Value

	mfuncxy2ret0; nil

	return ret
}

// ==================================== func2ret0{Bool,Int,...} ========================================

:func fsetarg(typ, tident, name, index ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	var bind ast.Node
	if t == nil {
		bind = ~"{
			place := xr.New(~,tident).Elem()
			place.Set(xr.ValueOf(~,name))
			env.Vals[~,index] = place
		}
	} else {
		typeident := maketypeident(t)
		switch t.Kind() {
			case xr.String:
				bind = ~"{
					place := xr.New(~,typeident).Elem()
					place.SetString(~,name)
					env.Vals[~,index] = place
				}
			case xr.Uint64:
				bind = ~"{env.Ints[~,index] = ~,name}
			default:
				bind = ~"{*(*~,typ)(unsafe.Pointer(&env.Ints[~,index])) = ~,name}
		}
	}
	return bind
}


// fully optimized function implementation
:macro mfunc2ret0(arg0typ, arg1typ ast.Node) ast.Node {
	var t0 r.Type = EvalType(arg0typ)
	var t1 r.Type = EvalType(arg1typ)

	if t0 != nil && t1 != nil {
		arg0bind := fsetarg(arg0typ, ~'targ0, ~'arg0, ~'{indexes[0]})
		arg1bind := fsetarg(arg1typ, ~'targ1, ~'arg1, ~'{indexes[1]})
		return ~"{
			if funcbody == nil {
				funv := xr.ValueOf(func(~,arg0typ, ~,arg1typ) {})
				ret = func(env *Env) xr.Value {
					return funv
				}
				break
			}
			ret = func(env *Env) xr.Value {
				// function is closed over the env used to DECLARE it
				env.MarkUsedByClosure()
				return xr.ValueOf(func(arg0 ~,arg0typ, arg1 ~,arg1typ) {
					env := newEnv4Func(env, nbind, nintbind, debugC)
					// copy arg0, arg1 into allocated binds
					~,arg0bind
					~,arg1bind
					// execute the body
					funcbody(env)

					env.freeEnv4Func()
				})
			}
		}
	}
	return ~"{
		rtype := t.ReflectType()
		if funcbody == nil {
			funv := xr.MakeFunc(rtype, func([]xr.Value) []xr.Value {
				return nil
			})
			ret = func(env *Env) xr.Value {
				return funv
			}
			break
		}
		ret = func(env *Env) xr.Value {
			// function is closed over the env used to DECLARE it
			env.MarkUsedByClosure()
			return xr.MakeFunc(rtype, func(args []xr.Value) []xr.Value {
				env := newEnv4Func(env, nbind, nintbind)

				// copy args into allocated binds
				for i := range rtargs {
					if idx := indexes[i]; idx != NoIndex {
						place := xr.New(rtargs[i]).Elem()
						if arg := args[i]; arg.IsValid() && arg != None {
							place.Set(arg.Convert(rtargs[i]))
						}
						env.Vals[idx] = place
					}
				}
				// execute the body
				funcbody(env)

				return ZeroValues
			})
		}
	}
}


:macro mfuncy2ret0(arg0typ ast.Node) ast.Node {
	return ~"{
		switch karg1 {
		case xr.Bool:      {mfunc2ret0; ~,arg0typ; bool}
		case xr.Int:       {mfunc2ret0; ~,arg0typ; int}
		case xr.Int8:      {mfunc2ret0; ~,arg0typ; int8}
		case xr.Int16:     {mfunc2ret0; ~,arg0typ; int16}
		case xr.Int32:     {mfunc2ret0; ~,arg0typ; int32}
		case xr.Int64:     {mfunc2ret0; ~,arg0typ; int64}
		case xr.Uint:      {mfunc2ret0; ~,arg0typ; uint}
		case xr.Uint8:     {mfunc2ret0; ~,arg0typ; uint8}
		case xr.Uint16:    {mfunc2ret0; ~,arg0typ; uint16}
		case xr.Uint32:    {mfunc2ret0; ~,arg0typ; uint32}
		case xr.Uint64:    {mfunc2ret0; ~,arg0typ; uint64}
		case xr.Uintptr:   {mfunc2ret0; ~,arg0typ; uintptr}
		case xr.Float32:   {mfunc2ret0; ~,arg0typ; float32}
		case xr.Float64:   {mfunc2ret0; ~,arg0typ; float64}
		case xr.Complex64: {mfunc2ret0; ~,arg0typ; complex64}
		case xr.Complex128:{mfunc2ret0; ~,arg0typ; complex128}
		case xr.String:    {mfunc2ret0; ~,arg0typ; string}
		}
	}
}

:macro mdeclfuncy2ret0(arg0typ ast.Node) ast.Node {
	decl := ~"{
		~func foo (m *funcMaker, indexes *[2]int, karg1 r.Kind, debugC *Comp) func(*Env) xr.Value {
			// do NOT keep a reference to funcMaker
			nbind := m.nbind
			nintbind := m.nintbind
			funcbody := m.funcbody
			var ret func(*Env) xr.Value

			mfuncy2ret0; ~,arg0typ

			return ret
		}
	}
	var t r.Type = EvalType(arg0typ)
	decl.Name = makeprefixtypeident("func2ret0", t)
	return decl
}

mdeclfuncy2ret0; bool
mdeclfuncy2ret0; int
mdeclfuncy2ret0; int8
mdeclfuncy2ret0; int16
mdeclfuncy2ret0; int32
mdeclfuncy2ret0; int64
mdeclfuncy2ret0; uint
mdeclfuncy2ret0; uint8
mdeclfuncy2ret0; uint16
mdeclfuncy2ret0; uint32
mdeclfuncy2ret0; uint64
mdeclfuncy2ret0; uintptr
mdeclfuncy2ret0; float32
mdeclfuncy2ret0; float64
mdeclfuncy2ret0; complex64
mdeclfuncy2ret0; complex128
mdeclfuncy2ret0; string
