/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017-2019 Massimiliano Ghilardi
 *
 *     This Source Code Form is subject to the terms of the Mozilla Public
 *     License, v. 2.0. If a copy of the MPL was not distributed with this
 *     file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *
 * call1ret1.go
 *
 *  Created on Apr 15, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"github.com/truthtracer/gomacro/base/reflect"
)

:package fast

:import (
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func maketypevar(typ ast.Node) ast.Node {
	t := EvalType(typ)
	return &ast.Ident{Name: "TypeOf" + upcasefirstbyte(t.Name())}
}

:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case xr.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

:macro mcall1ret1(argtyp, rettyp ast.Node) ast.Node {
	if EvalType(rettyp) == nil {
		// keep the arguments and result wrapped in a reflect.Value
		return ~"{
			ret = func(env *Env) xr.Value {
				funv := exprfun(env)
				argv := []xr.Value{
					argfun(env),
				}
				return callxr(funv, argv)[0]
			}
		}
	}
	if EvalType(argtyp) == nil {
		ret0 := convertvalue1(rettyp, ~'ret0)

		return ~"{
			ret = func(env *Env) ~,rettyp {
				funv := exprfun(env)
				argv := []xr.Value{
					argfun(env),
				}
				// Debugf("calling %v with args [%v]", r.TypeOf(funv), argv)
				ret0 := callxr(funv, argv)[0]
				return ~,ret0
			}
		}
	}

	cachefun := ~"{
		if cachedfunv != funv {
			cachedfunv = funv
			cachedfun = funv.Interface().(func(~,argtyp) ~,rettyp)
		}
	}

	argconv := convertvalue1(argtyp, ~'{xr.ValueOf(arg.Value)})

	return ~"{
		// Debugf("compiling call to %v, funsym=%p, funupn=%v, maxdepth=%v", r.TypeOf((func(~,argtyp) ~,rettyp)(nil)), funsym, funupn, maxdepth)
		if funsym != nil && funupn == maxdepth - 1 {
			var cachedfun func(~,argtyp) ~,rettyp
			if arg.Const() {
				argconst := ~,argconv
				ret = func(env *Env) ~,rettyp {
					funv := env.FileEnv.Vals[funindex]
					~,cachefun
					// Debugf("calling %v with args [%v]", r.TypeOf(cachedfun), argconst)
					return cachedfun(argconst)
				}
			} else {
				argfun := arg.Fun.(func(env *Env) ~,argtyp)
				ret = func(env *Env) ~,rettyp {
					funv := env.FileEnv.Vals[funindex]
					~,cachefun
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					return cachedfun(arg)
				}
			}
		} else {
			argfun := arg.WithFun().(func(env *Env) ~,argtyp)
			if funsym != nil && funupn == 0 {
				ret = func(env *Env) ~,rettyp {
					fun := env.Vals[funindex].Interface().(func(~,argtyp) ~,rettyp)
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					return fun(arg)
				}
			} else if funsym != nil && funupn == 1 {
				ret = func(env *Env) ~,rettyp {
					fun := env.Outer.Vals[funindex].Interface().(func(~,argtyp) ~,rettyp)
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					return fun(arg)
				}
			} else {
				ret = func(env *Env) ~,rettyp {
					fun := exprfun(env).Interface().(func(~,argtyp) ~,rettyp)
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					return fun(arg)
				}
			}
		}
	}
}

:macro mcall1ret1compact(argtyp, rettyp ast.Node) ast.Node {
	if EvalType(rettyp) == nil || EvalType(argtyp) == nil {
		// nothing to optimize...
		return ~"{mcall1ret1; ~,argtyp; ~,rettyp}
	}

	return ~"{
		argfun := arg.WithFun().(func(env *Env) ~,argtyp)
		ret = func(env *Env) ~,rettyp {
			fun := exprfun(env).Interface().(func(~,argtyp) ~,rettyp)
			arg := argfun(env)
			// Debugf("calling %v with args [%v]", r.TypeOf(fun), argconst)
			return fun(arg)
		}
	}
}

:macro mcallx1ret1(rettyp ast.Node) ast.Node {
	return ~"{
		switch karg {
			case xr.Bool:      {mcall1ret1; bool;       ~,rettyp}
			case xr.Int:       {mcall1ret1; int;        ~,rettyp}
			case xr.Int8:      {mcall1ret1; int8;       ~,rettyp}
			case xr.Int16:     {mcall1ret1; int16;      ~,rettyp}
			case xr.Int32:     {mcall1ret1; int32;      ~,rettyp}
			case xr.Int64:     {mcall1ret1; int64;      ~,rettyp}
			case xr.Uint:      {mcall1ret1; uint;       ~,rettyp}
			case xr.Uint8:     {mcall1ret1; uint8;      ~,rettyp}
			case xr.Uint16:    {mcall1ret1; uint16;     ~,rettyp}
			case xr.Uint32:    {mcall1ret1; uint32;     ~,rettyp}
			case xr.Uint64:    {mcall1ret1; uint64;     ~,rettyp}
			case xr.Uintptr:   {mcall1ret1; uintptr;    ~,rettyp}
			case xr.Float32:   {mcall1ret1; float32;    ~,rettyp}
			case xr.Float64:   {mcall1ret1; float64;    ~,rettyp}
			case xr.Complex64: {mcall1ret1; complex64;  ~,rettyp}
			case xr.Complex128:{mcall1ret1; complex128; ~,rettyp}
			case xr.String:    {mcall1ret1; string;     ~,rettyp}
			default:          {mcall1ret1; nil;        ~,rettyp}
		}
	}
}

:macro mcallx1ret1compact(rettyp ast.Node) ast.Node {
	return ~"{
		switch karg {
			case xr.Bool:      {mcall1ret1compact; bool;       ~,rettyp}
			case xr.Int:       {mcall1ret1compact; int;        ~,rettyp}
			case xr.Int8:      {mcall1ret1compact; int8;       ~,rettyp}
			case xr.Int16:     {mcall1ret1compact; int16;      ~,rettyp}
			case xr.Int32:     {mcall1ret1compact; int32;      ~,rettyp}
			case xr.Int64:     {mcall1ret1compact; int64;      ~,rettyp}
			case xr.Uint:      {mcall1ret1compact; uint;       ~,rettyp}
			case xr.Uint8:     {mcall1ret1compact; uint8;      ~,rettyp}
			case xr.Uint16:    {mcall1ret1compact; uint16;     ~,rettyp}
			case xr.Uint32:    {mcall1ret1compact; uint32;     ~,rettyp}
			case xr.Uint64:    {mcall1ret1compact; uint64;     ~,rettyp}
			case xr.Uintptr:   {mcall1ret1compact; uintptr;    ~,rettyp}
			case xr.Float32:   {mcall1ret1compact; float32;    ~,rettyp}
			case xr.Float64:   {mcall1ret1compact; float64;    ~,rettyp}
			case xr.Complex64: {mcall1ret1compact; complex64;  ~,rettyp}
			case xr.Complex128:{mcall1ret1compact; complex128; ~,rettyp}
			case xr.String:    {mcall1ret1compact; string;     ~,rettyp}
			default:              {mcall1ret1compact; nil;        ~,rettyp}
		}
	}
}

:macro mcallx1ret1minimal(rettyp ast.Node) ast.Node {
	return ~"{
		if karg == kret {
			mcall1ret1; ~,rettyp; ~,rettyp
		} else {
		    mcall1ret1;   nil;    ~,rettyp
		}
    }
}

func (c *Comp) call1ret1(call *Call, maxdepth int) I {
	expr := call.Fun
	exprfun := expr.AsX1()
	funsym := expr.Sym
	funupn, funindex := -1, -1
	if funsym != nil {
		funupn = funsym.Upn
		funindex = funsym.Desc.Index()
		if funindex == NoIndex {
			c.Errorf("internal error: call1ret1() invoked for constant function %v. use call_builtin() instead", expr)
		}
	}
	t := expr.Type
	targ, tret := t.In(0), t.Out(0)
	karg, kret := targ.Kind(), tret.Kind()
	var ret I
	if reflect.KindToType(karg) != targ.ReflectType() || reflect.KindToType(kret) != tret.ReflectType() {
		return c.call1ret1namedtype(call, maxdepth)
	}
	arg := call.Args[0]
	argfun := arg.AsX1()
	var cachedfunv xr.Value

	switch kret {
		// do NOT optimize all cases... too many combinations
		case xr.Bool:      {mcallx1ret1;        bool}
		case xr.Int:       {mcallx1ret1;        int}
		case xr.Int8:      {mcallx1ret1minimal; int8}
		case xr.Int16:     {mcallx1ret1minimal; int16}
		case xr.Int32:     {mcallx1ret1minimal; int32}
		case xr.Int64:     {mcallx1ret1;        int64}
		case xr.Uint:      {mcallx1ret1;        uint}
		case xr.Uint8:     {mcallx1ret1minimal; uint8}
		case xr.Uint16:    {mcallx1ret1minimal; uint16}
		case xr.Uint32:    {mcallx1ret1minimal; uint32}
		case xr.Uint64:    {mcallx1ret1;        uint64}
		case xr.Uintptr:   {mcallx1ret1minimal; uintptr}
		case xr.Float32:   {mcallx1ret1minimal; float32}
		case xr.Float64:   {mcallx1ret1compact; float64}
		case xr.Complex64: {mcallx1ret1minimal; complex64}
		case xr.Complex128:{mcallx1ret1compact; complex128}
		case xr.String:    {mcallx1ret1;        string}
	}
	if ret == nil {
		{mcall1ret1;  nil; nil} // cannot optimize more this one...
	}
	return ret
}

:macro mcallx1ret1namedtype(rettyp ast.Node) ast.Node {
	retconv := convertvalue1(rettyp, ~'retv)

	return ~"{
		ret = func(env *Env) ~,rettyp {
			funv := exprfun(env)
			argv := []xr.Value{
				argfun(env),
			}
			retv := callxr(funv, argv)[0]
			return ~,retconv
		}
	}
}

func (c *Comp) call1ret1namedtype(call *Call, maxdepth int) I {
	expr := call.Fun
	exprfun := expr.AsX1()
	t := expr.Type
	kret := t.Out(0).Kind()

	argfun := call.Args[0].AsX1()
	var ret I

	switch kret {
		case xr.Bool:      {mcallx1ret1namedtype; bool}
		case xr.Int:       {mcallx1ret1namedtype; int}
		case xr.Int8:      {mcallx1ret1namedtype; int8}
		case xr.Int16:     {mcallx1ret1namedtype; int16}
		case xr.Int32:     {mcallx1ret1namedtype; int32}
		case xr.Int64:     {mcallx1ret1namedtype; int64}
		case xr.Uint:      {mcallx1ret1namedtype; uint}
		case xr.Uint8:     {mcallx1ret1namedtype; uint8}
		case xr.Uint16:    {mcallx1ret1namedtype; uint16}
		case xr.Uint32:    {mcallx1ret1namedtype; uint32}
		case xr.Uint64:    {mcallx1ret1namedtype; uint64}
		case xr.Uintptr:   {mcallx1ret1namedtype; uintptr}
		case xr.Float32:   {mcallx1ret1namedtype; float32}
		case xr.Float64:   {mcallx1ret1namedtype; float64}
		case xr.Complex64: {mcallx1ret1namedtype; complex64}
		case xr.Complex128:{mcallx1ret1namedtype; complex128}
		case xr.String:    {mcallx1ret1namedtype; string}
	}
	if ret == nil {
		{mcall1ret1;  nil; nil} // cannot optimize more this one...
	}
	return ret
}

